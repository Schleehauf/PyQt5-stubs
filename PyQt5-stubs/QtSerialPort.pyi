# The PEP 484 type hints stub file for the QtSerialPort module.
#
# Manually generated
#

from PyQt5 import QtCore 
import sip 
from enum import IntEnum

class QSerialPort(QtCore.QIODevice):
    
    baudRateChanged: QtCore.pyqtSignal
    breakEnabledChanged: QtCore.pyqtSignal
    dataBitsChanged: QtCore.pyqtSignal
    dataTerminalReadyChanged: QtCore.pyqtSignal
    errorOccurred: QtCore.pyqtSignal
    flowControlChanged: QtCore.pyqtSignal
    parityChanged: QtCore.pyqtSignal
    requestToSendChanged: QtCore.pyqtSignal
    stopBitsChanged: QtCore.pyqtSignal

    class baudRate(IntEnum): ...
    Baud1200 = ...  # type: QSerialPort.BaudRate
    Baud2400 = ...  # type: QSerialPort.BaudRate
    Baud4800 = ...  # type: QSerialPort.BaudRate
    Baud9600 = ...  # type: QSerialPort.BaudRate
    Baud19200 = ...  # type: QSerialPort.BaudRate
    Baud38400 = ...  # type: QSerialPort.BaudRate
    Baud57600 = ...  # type: QSerialPort.BaudRate
    Baud115200 = ...  # type: QSerialPort.BaudRate
    UnknownBaud = ...  # type: QSerialPort.BaudRate

    class DataBits(IntEnum): ...
    Data5 = ...  # type: QSerialPort.DataBits
    Data6 = ...  # type: QSerialPort.DataBits
    Data7 = ...  # type: QSerialPort.DataBits
    Data8 = ...  # type: QSerialPort.DataBits
    UnknownDataBits = ...  # type: QSerialPort.DataBits

    class Direction(sip.simplewrapper): ...
    Input  = ...  # type: QSerialPort.Direction
    Output = ...  # type: QSerialPort.Direction
    AllDirections = ...  # type: QSerialPort.Direction

    class Directions(sip.simplewrapper): ...
    Input  = ...  # type: QSerialPort.Direction
    Output = ...  # type: QSerialPort.Direction
    AllDirections = ...  # type: QSerialPort.Direction

    class PinoutSignal(sip.simplewrapper): ...
    NoSignal = ...  #type: QSerialPort.PinoutSignal
    TransmittedDataSignal = ...  #type: QSerialPort.PinoutSignal
    ReceivedDataSignal = ...  #type: QSerialPort.PinoutSignal
    DataTerminalReadySignal = ...  #type: QSerialPort.PinoutSignal
    DataCarrierDetectSignal = ...  #type: QSerialPort.PinoutSignal
    DataSetReadySignal = ...  #type: QSerialPort.PinoutSignal
    RingIndicatorSignal = ...  #type: QSerialPort.PinoutSignal
    RequestToSendSignal = ...  #type: QSerialPort.PinoutSignal
    ClearToSendSignal = ...  #type: QSerialPort.PinoutSignal
    SecondaryTransmittedDataSignal = ...  #type: QSerialPort.PinoutSignal
    SecondaryReceivedDataSignal = ...  #type: QSerialPort.PinoutSignal

    class SerialPortError(IntEnum): ...
    NoError = ...  # type: QSerialPort.error
    DeviceNotFoundError = ...  # type: QSerialPort.error
    PermissionError = ...  # type: QSerialPort.error
    OpenError = ...  # type: QSerialPort.error
    NotOpenError = ...  # type: QSerialPort.error
    ParityError = ...  # type: QSerialPort.error
    FramingError = ...  # type: QSerialPort.error
    BreakConditionError = ...  # type: QSerialPort.error
    WriteError = ...  # type: QSerialPort.error
    ReadError = ...  # type: QSerialPort.error
    ResourceError = ...  # type: QSerialPort.error
    UnsupportedOperationError = ...  # type: QSerialPort.error
    TimeoutError = ...  # type: QSerialPort.error
    UnknownError = ...  # type: QSerialPort.error

    class FlowControl(sip.simplewrapper): ...
    NoFlowControl = ...  # type: QSerialPort.FlowControl
    HardwareControl = ...  # type: QSerialPort.FlowControl
    SoftwareControl = ...  # type: QSerialPort.FlowControl
    UnknownFlowControl = ...  # type: QSerialPort.FlowControl

    class Parity(sip.simplewrapper): ...
    NoParity = ...  #type: QSerialPort.Parity
    EvenParity = ...  #type: QSerialPort.Parity
    OddParity = ...  #type: QSerialPort.Parity
    SpaceParity = ...  #type: QSerialPort.Parity
    MarkParity = ...  #type: QSerialPort.Parity
    UnknownParity = ...  #type: QSerialPort.Parity

    class stopBits(sip.simplewrapper): ...
    OneStop = ...  #type: QSerialPort.StopBits
    OneAndHalfStop = ...  #type: QSerialPort.StopBits
    TwoStop = ...  #type: QSerialPort.StopBits
    UnknownStopBits = ...  #type: QSerialPort.StopBits

    @typing.overload
    def __init__(self, QSerialPortInfo, QObject) -> None: ...

    @typing.overload
    def __init__(self, QString, QObject) -> None: ...

    @typing.overload
    def __init__(self, QObject) -> None: ...


    def atEnd(self): # real signature unknown; restored from __doc__
        """ atEnd(self) -> bool """
        return False

    def baudRate(directions: 'QSerialPort.Directions'  = AllDirections) -> int: ...
    def clear(directions: 'QSerialPort.Directions' = AllDirections) -> bool: ...
    def clearError() -> None: ...
    def dataBits() -> 'QSerialPort.DataBits' : ...
    def error() -> 'QSerialPort.SerialPortError'	: ...
    def flowControl() -> 'QSerialPort.FlowControl' 	: ...
    def flush()  -> bool: ...
    def handle() -> QSerialPort.Handle: ...
    def isBreakEnabled()  -> bool: ...
    def isDataTerminalReady() -> bool: ...
    def isRequestToSend() -> bool: ...
    def parity() -> 'QSerialPort.Parity': ...
    def pinoutSignals() -> QSerialPortPinoutSignals: ...
    def portName() -> str: ...
    def readBufferSize() -> int:...
    def sendBreak(duration: int  = 0) -> bool: ...
    def setBaudRate(int, directions: QSerialPort.Directions  = AllDirections) -> bool: ...
    def setBreakEnabled(set: bool = true) -> bool: ...
    def setDataBits(dataBits: 'QSerialPort.DataBits') -> bool: ...
    def setDataTerminalReady(set: bool) -> bool: ...
    def setFlowControl(flowControl: 'QSerialPort.FlowControl') -> bool: ...
    def setParity(parity: 'QSerialPort.Parity') -> bool: ...
    def setPort(serialPortInfo: QSerialPortInfo) -> None: ...
    def setPortName(name: str) -> None: ...
    def setReadBufferSize(size: int) -> None: ...
    def setRequestToSend(set: bool) -> bool: ...
    def setStopBits(stopBits: 'QSerialPort.StopBits') -> bool: ...
    def	stopBits() -> QSerialPort.StopBits: ...

class QSerialPortInfo(__sip.simplewrapper):

    @typing.overload
    def __init__(self) -> None: ...

    @typing.overload
    def __init__(self, QSerialPort) -> None: ...

    @typing.overload
    def __init__(self, str) -> None: ...

    @typing.overload
    def __init__(self, QSerialPortInfo) -> None: ...
    def availablePorts(self) -> List['QSerialPortInfo']: ...
    def description(self) -> str: ...
    def hasProductIdentifier(self) -> bool: ...
    def hasVendorIdentifier(self) -> bool: ...
    def isBusy(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def manufacturer(self) -> str: ...
    def portName(self) -> str: ...
    def productIdentifier(self) -> int: ...
    def serialNumber(self) -> str: ...
    def standardBaudRates(self)-> typing.List[int]: ...
    def swap(self, other: 'QSerialPortInfo') -> None: ...
    def systemLocation(self) -> str: ...
    def vendorIdentifier(self) -> int: ...
